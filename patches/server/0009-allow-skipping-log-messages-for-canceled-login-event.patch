From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: lukas81298 <lukas81298@gommehd.net>
Date: Wed, 5 Apr 2023 22:12:16 +0200
Subject: [PATCH] allow skipping log messages for canceled login events


diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index b656741eb68adeb04bf995f1045902cb6bd5f2e7..061b2cc5cc0c39b0b2eb35c499145f4a3b5e834d 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -85,6 +85,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
     private ServerPlayer player; // CraftBukkit
     public boolean iKnowThisMayNotBeTheBestIdeaButPleaseDisableUsernameValidation = false; // Paper - username validation overriding
     private int velocityLoginMessageId = -1; // Paper - Add Velocity IP Forwarding Support
+    private boolean disconnectLogged = false; // Cheetah - Allow skipping log messages for canceled login events
 
     public ServerLoginPacketListenerImpl(MinecraftServer server, Connection connection, boolean transferred) {
         this.state = ServerLoginPacketListenerImpl.State.HELLO;
@@ -138,8 +139,15 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
     }
 
     public void disconnect(Component reason) {
+        // Cheetah start - Allow skipping log messages for canceled login events
+        disconnect(reason, false);
+    }
+
+    public void disconnect(Component reason, boolean skipLog) {
         try {
-            ServerLoginPacketListenerImpl.LOGGER.info("Disconnecting {}: {}", this.getUserName(), reason.getString());
+            this.disconnectLogged = true;
+            if(!skipLog) ServerLoginPacketListenerImpl.LOGGER.info("Disconnecting {}: {}", this.getUserName(), reason.getString());
+            // Cheetah end
             this.connection.send(new ClientboundLoginDisconnectPacket(reason));
             this.connection.disconnect(reason);
         } catch (Exception exception) {
@@ -154,7 +162,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
 
     @Override
     public void onDisconnect(Component reason) {
-        ServerLoginPacketListenerImpl.LOGGER.info("{} lost connection: {}", this.getUserName(), reason.getString());
+        if (!this.disconnectLogged) ServerLoginPacketListenerImpl.LOGGER.info("{} lost connection: {}", this.getUserName(), reason.getString()); // Cheetah - Allow skipping log messages for canceled login events
     }
 
     public String getUserName() {
@@ -369,12 +377,14 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
         playerName = gameprofile.getName();
         uniqueId = gameprofile.getId();
         // Paper end - Add more fields to AsyncPlayerPreLoginEvent
+        boolean skipLog = asyncEvent.isSkipLog(); // Cheetah - Allow skipping log messages for canceled login events
 
         if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
             final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
             if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
                 event.disallow(asyncEvent.getResult(), asyncEvent.kickMessage()); // Paper - Adventure
             }
+            event.setSkipLog(skipLog); // Cheetah - Allow skipping log messages for canceled login events
             Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
                 @Override
                 protected PlayerPreLoginEvent.Result evaluate() {
@@ -385,11 +395,14 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
 
             ServerLoginPacketListenerImpl.this.server.processQueue.add(waitable);
             if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
-                this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage())); // Paper - Adventure
+                // Cheetah start - Allow skipping log messages for canceled login events
+                skipLog = event.isSkipLog();
+                this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage()), skipLog); // Paper - Adventure
+                // Cheetah end
             }
         } else {
             if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
-                this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(asyncEvent.kickMessage())); // Paper - Adventure
+                this.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(asyncEvent.kickMessage()), skipLog); // Cheetah - Allow skipping log messages for canceled login events // Paper - Adventure
             }
         }
         return gameprofile; // Paper - Add more fields to AsyncPlayerPreLoginEvent
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index be1218c1bf2a758d4f402093116e2cdceb32621f..0be5bae56d2031761f09f5ee412cc534537ce9b3 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -759,7 +759,7 @@ public abstract class PlayerList {
 
         this.cserver.getPluginManager().callEvent(event);
         if (event.getResult() != PlayerLoginEvent.Result.ALLOWED) {
-            loginlistener.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage())); // Paper - Adventure
+            loginlistener.disconnect(io.papermc.paper.adventure.PaperAdventure.asVanilla(event.kickMessage()), event.isSkipLog()); // Paper - Adventure
             return null;
         }
         return entity;
